{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js","components/Logo/lightbulb.svg"],"names":["Navigation","style","display","justifyContent","className","Logo","options","max","height","width","paddingTop","src","lb","alt","ImageLinkForm","onInputChange","onSubmit","type","onChange","event","onClick","Rank","FaceRecognition","imageURL","box","faceBoxList","map","child","i","key","top","topRow","bottom","bottomRow","left","leftCol","right","rightCol","id","length","console","log","particleOptions","particles","number","value","density","enable","value_area","interactivity","events","onhover","mode","app","Clarifai","App","apiKey","useState","input","setInput","setImageURL","setBox","params","target","models","initModel","FACE_DETECT_MODEL","then","generalModel","predict","response","boxData","data","regions","outputs","image","document","getElementById","Number","undefined","region","region_info","bounding_box","left_col","top_row","right_col","bottom_row","calculateFaceLocation","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.1df5ef6a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n            <p className=\"f3 dim pa3 pointer link underline-hover black\">\r\n                Sign out\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\nimport lb from \"./lightbulb.svg\";\r\nimport \"./Logo.css\";\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"ma4 mt0\">\r\n            <Tilt\r\n                className=\"Tilt br2 shadow-2\"\r\n                options={{ max: 50 }}\r\n                style={{ height: 100, width: 100 }}\r\n            >\r\n                <div className=\"Tilt-inner pa3\">\r\n                    <img style={{ paddingTop: \"1px\" }} src={lb} alt=\"logo\" />\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport \"./ImageLinkForm.css\";\r\n\r\nconst ImageLinkForm = ({ onInputChange, onSubmit }) => {\r\n    return (\r\n        <div>\r\n            <p className=\"f3\">\r\n                {\"Try inserting an image and see how many faces are present\"}\r\n            </p>\r\n            <div className=\"center\">\r\n                <div className=\"form pa4 br3 shadow-5 center\">\r\n                    <input\r\n                        className=\"f4 pa2 w-70 center\"\r\n                        type=\"text\"\r\n                        onChange={(event) => onInputChange(event)}\r\n                    />\r\n                    <button\r\n                        className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple\"\r\n                        onClick={() => onSubmit()}\r\n                    >\r\n                        Detect\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageLinkForm;\r\n","import React from \"react\";\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"white f3\">{`hi User! You are rank...`}</div>\r\n            <div className=\"white f1\">{`#5`}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rank;\r\n","import React from \"react\";\r\nimport \"./FaceRecognition.css\";\r\n\r\nconst FaceRecognition = ({ imageURL, box }) => {\r\n    const faceBoxList = box.map((child, i) => {\r\n        return (\r\n            <div\r\n                key={i}\r\n                className=\"bounding-box\"\r\n                style={{\r\n                    top: child.topRow,\r\n                    bottom: child.bottomRow,\r\n                    left: child.leftCol,\r\n                    right: child.rightCol,\r\n                }}\r\n            ></div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"center ma\">\r\n            <div className=\"absolute mt2\">\r\n                {imageURL ? (\r\n                    <img\r\n                        id=\"inputimage\"\r\n                        className=\"pa3, mt1 ma3 br3\"\r\n                        style={{ width: \"700px\", height: \"auto\" }}\r\n                        src={imageURL}\r\n                        alt=\" \"\r\n                    />\r\n                ) : null}\r\n\r\n                {faceBoxList}\r\n                {box.length < 1 ? (\r\n                    console.log(\"no faces present\")\r\n                ) : (\r\n                    <div className=\"f3 number bold\">\r\n                        <div className=\"white\">\r\n                            {`${box.length} face${box.length === 1 ? \"\" : \"s\"}`}{\" \"}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FaceRecognition;\r\n","import React, { useState } from \"react\";\nimport Clarifai from \"clarifai\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Particles from \"react-particles-js\";\nimport \"./App.css\";\n\nconst particleOptions = {\n    particles: {\n        number: {\n            value: 50,\n            density: {\n                enable: true,\n                value_area: 800,\n            },\n        },\n        interactivity: {\n            events: {\n                onhover: {\n                    enable: true,\n                    mode: \"repulse\",\n                },\n            },\n        },\n    },\n};\n\nconst app = new Clarifai.App({\n    apiKey: \"f99cac9f847a45c287058daf30d27327\",\n});\n\nfunction App() {\n    const [input, setInput] = useState(\"\");\n    const [imageURL, setImageURL] = useState(\"\");\n    const [box, setBox] = useState([]);\n\n    const onInputChange = (event) => {\n        setInput(event.target.value);\n    };\n\n    const calculateFaceLocation = (data) => {\n        /* jaycee code */\n        const regions = data.outputs[0].data.regions;\n        /* jaycee end code*/\n        const image = document.getElementById(\"inputimage\");\n        const width = Number(image.width);\n        const height = Number(image.height);\n\n        if (regions !== undefined) {\n            const faces = regions.map((region) => {\n                const box = region.region_info.bounding_box;\n                return {\n                    leftCol: box.left_col * width,\n                    topRow: box.top_row * height,\n                    rightCol: width - box.right_col * width,\n                    bottomRow: height - box.bottom_row * height,\n                };\n            });\n\n            return faces;\n        }\n        return [];\n    };\n\n    const displayFaceBox = (boxData) => {\n        setBox(boxData);\n    };\n\n    const onSubmit = () => {\n        setImageURL(input);\n        app.models\n            .initModel({\n                id: Clarifai.FACE_DETECT_MODEL,\n            })\n            .then((generalModel) => {\n                return generalModel.predict(input);\n            })\n            .then((response) => {\n                displayFaceBox(calculateFaceLocation(response));\n            })\n            .catch((err) => console.log(err));\n    };\n\n    return (\n        <div className=\"App\">\n            <Particles className=\"particle\" params={particleOptions} />\n            <Navigation />\n            <Logo />\n            <Rank />\n            <ImageLinkForm onInputChange={onInputChange} onSubmit={onSubmit} />\n            <FaceRecognition box={box} imageURL={imageURL} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/lightbulb.58c1d842.svg\";"],"sourceRoot":""}